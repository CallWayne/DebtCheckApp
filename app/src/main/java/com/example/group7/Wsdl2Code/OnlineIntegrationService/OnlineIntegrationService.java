package com.example.group7.Wsdl2Code.OnlineIntegrationService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/31/2016 1:56:47 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version

import com.example.group7.Wsdl2Code.OnlineIntegrationService.WS_Enums.*;
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class OnlineIntegrationService {
    
    public String NAMESPACE ="http://Online.debtcheck.de/";
    public String url="http://10.0.2.2:8080/debtcheck/OnlineIntegration";
    public int timeOut = 10000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public OnlineIntegrationService(){}
    
    public OnlineIntegrationService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public OnlineIntegrationService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public OnlineIntegrationService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void registerNewAccountAsync(String arg0,String arg1,String arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        registerNewAccountAsync(arg0, arg1, arg2, null);
    }
    
    public void registerNewAccountAsync(final String arg0,final String arg1,final String arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userLoginResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userLoginResponse doInBackground(Void... params) {
                return registerNewAccount(arg0, arg1, arg2, headers);
            }
            @Override
            protected void onPostExecute(userLoginResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("registerNewAccount", result);
                }
            }
        }.execute();
    }
    
    public userLoginResponse registerNewAccount(String arg0,String arg1,String arg2){
        return registerNewAccount(arg0, arg1, arg2, null);
    }
    
    public userLoginResponse registerNewAccount(String arg0,String arg1,String arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        //soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","registerNewAccount");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("", soapEnvelope,headers);
            }else{
                httpTransport.call("", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userLoginResponse resultVariable =  new userLoginResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addNewDebtAsync(int arg0,String arg1,double arg2,boolean arg2Specified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addNewDebtAsync(arg0, arg1, arg2, arg2Specified, null);
    }
    
    public void addNewDebtAsync(final int arg0,final String arg1,final double arg2,final boolean arg2Specified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, addNewDebtResponsee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected addNewDebtResponsee doInBackground(Void... params) {
                return addNewDebt(arg0, arg1, arg2, arg2Specified, headers);
            }
            @Override
            protected void onPostExecute(addNewDebtResponsee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addNewDebt", result);
                }
            }
        }.execute();
    }
    
    public addNewDebtResponsee addNewDebt(int arg0,String arg1,double arg2,boolean arg2Specified){
        return addNewDebt(arg0, arg1, arg2, arg2Specified, null);
    }
    
    public addNewDebtResponsee addNewDebt(int arg0,String arg1,double arg2,boolean arg2Specified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","addNewDebt");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/addNewDebt", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/addNewDebt", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    addNewDebtResponsee resultVariable =  new addNewDebtResponsee (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getMyDebtsAsync(int arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMyDebtsAsync(arg0, null);
    }
    
    public void getMyDebtsAsync(final int arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, debtListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected debtListResponse doInBackground(Void... params) {
                return getMyDebts(arg0, headers);
            }
            @Override
            protected void onPostExecute(debtListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getMyDebts", result);
                }
            }
        }.execute();
    }
    
    public debtListResponse getMyDebts(int arg0){
        return getMyDebts(arg0, null);
    }
    
    public debtListResponse getMyDebts(int arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","getMyDebts");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/getMyDebts", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/getMyDebts", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    debtListResponse resultVariable =  new debtListResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void logoutAsync(int arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        logoutAsync(arg0, null);
    }
    
    public void logoutAsync(final int arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, returnCodeResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected returnCodeResponse doInBackground(Void... params) {
                return logout(arg0, headers);
            }
            @Override
            protected void onPostExecute(returnCodeResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("logout", result);
                }
            }
        }.execute();
    }
    
    public returnCodeResponse logout(int arg0){
        return logout(arg0, null);
    }
    
    public returnCodeResponse logout(int arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","logout");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/logout", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/logout", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    returnCodeResponse resultVariable =  new returnCodeResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void payDebtAsync(int arg0,String arg1,double arg2,boolean arg2Specified,int arg3) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        payDebtAsync(arg0, arg1, arg2, arg2Specified, arg3, null);
    }
    
    public void payDebtAsync(final int arg0,final String arg1,final double arg2,final boolean arg2Specified,final int arg3,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, payDebtResponsee>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected payDebtResponsee doInBackground(Void... params) {
                return payDebt(arg0, arg1, arg2, arg2Specified, arg3, headers);
            }
            @Override
            protected void onPostExecute(payDebtResponsee result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("payDebt", result);
                }
            }
        }.execute();
    }
    
    public payDebtResponsee payDebt(int arg0,String arg1,double arg2,boolean arg2Specified,int arg3){
        return payDebt(arg0, arg1, arg2, arg2Specified, arg3, null);
    }
    
    public payDebtResponsee payDebt(int arg0,String arg1,double arg2,boolean arg2Specified,int arg3,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","payDebt");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapReq.addProperty("arg3",arg3);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/payDebt", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/payDebt", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    payDebtResponsee resultVariable =  new payDebtResponsee (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void loginAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        loginAsync(arg0, arg1, null);
    }
    
    public void loginAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userLoginResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userLoginResponse doInBackground(Void... params) {
                return login(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(userLoginResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("login", result);
                }
            }
        }.execute();
    }
    
    public userLoginResponse login(String arg0, String arg1){
        return login(arg0, arg1, null);
    }
    
    public userLoginResponse login(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","login");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/login", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/login", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userLoginResponse resultVariable =  new userLoginResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getMyClaimsAsync(int arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getMyClaimsAsync(arg0, null);
    }
    
    public void getMyClaimsAsync(final int arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, debtListResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected debtListResponse doInBackground(Void... params) {
                return getMyClaims(arg0, headers);
            }
            @Override
            protected void onPostExecute(debtListResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getMyClaims", result);
                }
            }
        }.execute();
    }
    
    public debtListResponse getMyClaims(int arg0){
        return getMyClaims(arg0, null);
    }
    
    public debtListResponse getMyClaims(int arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://Online.debtcheck.de/","getMyClaims");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://Online.debtcheck.de/getMyClaims", soapEnvelope,headers);
            }else{
                httpTransport.call("http://Online.debtcheck.de/getMyClaims", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    debtListResponse resultVariable =  new debtListResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
